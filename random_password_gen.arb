# frozen_string_literal: true
module RandomPasswordGenerator
  def RandomPasswordGenerator.pass_gen
    puts 'WELCOME TO THE RANDOM PASSWORD GENERATOR'
    puts 'Enter the password length:'
    length = gets.chomp
    if length !~ /\A-?\d+\Z/ || length == '0'
      puts "Invalid length"
      exit
    end
    length=length.to_i
    password_specifications = {}
    puts "Want to add numeric in password, yes or no?"
    pass_numeric = gets.chomp
    password_specifications["pass_numeric"] = pass_numeric
    puts "Want to add alphabet in password, yes or no?"
    pass_alphabet = gets.chomp
    password_specifications["pass_alphabet"] = pass_alphabet
    puts "Want to add special character in password, yes or no?"
    pass_special_char = gets.chomp
    password_specifications["pass_special_char"] = pass_special_char
    generated_password(password_specifications.values.join,length)
  end
  def RandomPasswordGenerator.generated_password(entry,len)
    case entry
    when 'yesnono'
      output = len.times.map {('1'..'9').to_a.sample }.join
      puts "Random Generated Password : #{output}"
    when 'noyesno'
      output = len.times.map {('A'..'Z').to_a.sample }.join
      puts "Random Generated Password : #{output}"
    when 'nonoyes'
      output = len.times.map {('!'..'?').to_a.sample }.join
      puts "Random Generated Password : #{output}"
    when 'yesyesno'
      output = len.times.map {[*('1'..'9'), *('a'..'z')].to_a.sample }.join
      puts "Random Generated Password : #{output}"
    when 'yesnoyes'
      output = len.times.map {[*('1'..'9'), *('!'..'?')].to_a.sample }.join
      puts "Random Generated Password : #{output}"
    when 'noyesyes'
      output = len.times.map {[*('a'..'z'), *('!'..'?')].to_a.sample }.join
      puts "Random Generated Password : #{output}"
    when 'yesyesyes'
      output = len.times.map {[*('1'..'9'), *('a'..'z'), *('!'..'?')].to_a.sample }.join
      puts "Random Generated Password : #{output}"
    else
      puts "Invalid Entries"
      end
  end
end
RandomPasswordGenerator.pass_gen
